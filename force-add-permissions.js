/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ POST_NOTIFICATIONS –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ APK
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ gradle build
 */

const fs = require('fs');
const path = require('path');

function forceAddPermissions() {
  console.log('üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï POST_NOTIFICATIONS');
  
  const manifestPath = path.join(__dirname, 'capacitor-app', 'android', 'app', 'src', 'main', 'AndroidManifest.xml');
  
  if (!fs.existsSync(manifestPath)) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: AndroidManifest.xml –Ω–µ –Ω–∞–π–¥–µ–Ω');
    process.exit(1);
  }
  
  let manifest = fs.readFileSync(manifestPath, 'utf8');
  console.log(`üìÑ –†–∞–∑–º–µ—Ä –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: ${manifest.length} —Å–∏–º–≤–æ–ª–æ–≤`);
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ POST_NOTIFICATIONS –µ—Å–ª–∏ –µ—Å—Ç—å
  manifest = manifest.replace(/\s*<uses-permission[^>]*POST_NOTIFICATIONS[^>]*\/>\s*/g, '');
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º POST_NOTIFICATIONS –≤ —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü
  const permissions = [
    'android.permission.POST_NOTIFICATIONS',
    'android.permission.WAKE_LOCK', 
    'android.permission.VIBRATE',
    'android.permission.RECEIVE_BOOT_COMPLETED',
    'com.google.android.c2dm.permission.RECEIVE',
    'android.permission.ACCESS_NETWORK_STATE'
  ];
  
  permissions.forEach(permission => {
    // –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    const regex = new RegExp(`\\s*<uses-permission[^>]*${permission.replace(/\./g, '\\.')}[^>]*\\/>\\s*`, 'g');
    manifest = manifest.replace(regex, '');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ </manifest>
    manifest = manifest.replace(
      '</manifest>',
      `    <uses-permission android:name="${permission}" />\n</manifest>`
    );
    console.log(`‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: ${permission}`);
  });
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
  fs.writeFileSync(manifestPath, manifest);
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  const finalManifest = fs.readFileSync(manifestPath, 'utf8');
  if (finalManifest.includes('POST_NOTIFICATIONS')) {
    console.log('‚úÖ POST_NOTIFICATIONS –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –î–û–ë–ê–í–õ–ï–ù');
    console.log(`üìè –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${finalManifest.length} —Å–∏–º–≤–æ–ª–æ–≤`);
  } else {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: POST_NOTIFICATIONS –ù–ï –î–û–ë–ê–í–õ–ï–ù');
    process.exit(1);
  }
}

if (require.main === module) {
  forceAddPermissions();
}

module.exports = forceAddPermissions;