Keystore Location and Correct Reference in Gradle (for CI)
Yes, the keystore file is indeed located at capacitor-app/android/app/android-keystore.keystore. The CI pipeline creates or expects the keystore at that exact location (as shown by the build steps that decode the base64 secret and output the file to android/app/android-keystore.keystore
file-lo8gy68qpnmuku1s6gfm9k
). To reference this keystore in build.gradle in a way that works in CI (or any environment), you should ensure the path is correct and not environment-dependent. The best practice is to put the keystore in the module’s directory and use a relative path via Gradle’s file() function as described above. For instance, in the app’s build.gradle, inside the signingConfigs, use:
groovy
Копировать
Редактировать
storeFile file("android-keystore.keystore")
This will look for android-keystore.keystore in the app module folder (which is exactly where the CI places it). Because Gradle uses the module directory as the base for relative paths in file(), this approach yields the correct path on the CI server (and locally) without any double-directory issue. In summary, referencing the keystore as file("android-keystore.keystore") in the app module’s signingConfig is the correct fix – it ensures Gradle points to capacitor-app/android/app/android-keystore.keystore as intended, both in local builds and on CI.
Example: Proper Release SigningConfig Setup
Below is an example of a correct signingConfig for a release build in the app’s Gradle configuration, adjusted for this project’s context. This snippet assumes the keystore file is located in the app directory and that the sensitive values are provided via environment variables (as is done in CI):
groovy
Копировать
Редактировать
android {
    signingConfigs {
        release {
            // Reference keystore file in app directory
            storeFile file("android-keystore.keystore")
            // Use CI-provided environment variables for credentials
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {
        release {
            // Link the release build type with the signing config
            signingConfig signingConfigs.release
            // (Other release build settings like minify/proguard can go here)
        }
        // debug and other buildTypes...
    }
}
In this configuration, the keystore path is correctly specified relative to the app module (storeFile file("android-keystore.keystore")), so Gradle will find the file at android/app/android-keystore.keystore without interpreting an extra app directory. The passwords and alias are pulled from environment variables (which should be set in the CI environment) rather than being hard-coded, which aligns with how the GitHub Actions pipeline provides those secrets. This ensures that the app will be signed with the provided keystore on CI using the release signing config. Using the above setup, the Gradle build will locate the keystore properly and the release APK will be signed without path errors. The key points are to place the keystore in the correct folder and reference it with the correct relative path in build.gradle
coderwall.com
, which resolves the earlier path issue and makes the configuration CI-friendly.