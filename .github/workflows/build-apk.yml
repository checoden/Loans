name: Build APK

on:
  push:
    tags: ['v*']

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. Клонируем репозиторий
    - uses: actions/checkout@v4

    # 2. Устанавливаем Node.js
    - uses: actions/setup-node@v4
      with:
        node-version: '20'

    # 3. Устанавливаем Java 21
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    # 4. Установка зависимостей
    - run: npm ci

    # 5. Подготовка проекта и работа с Android
    - name: Prepare Capacitor project
      run: |
        # Подготовка проекта
        node prepare-for-apk.js
        
        cd capacitor-app
        npm install
        
        # Полностью очищаем проект перед добавлением платформы
        echo "Удаляем существующую Android платформу, если она есть"
        rm -rf android
        
        # Полностью очищаем package.json от Capacitor зависимостей
        echo "Очищаем package.json от всех Capacitor зависимостей"
        jq 'del(.dependencies."@capacitor/android") | del(.dependencies."@capacitor/core")' package.json > package.json.tmp
        mv package.json.tmp package.json
        
        # Повторно устанавливаем базовые зависимости
        npm install
        
        # Создаём директорию для Gradle Wrapper ПЕРЕД добавлением Android
        mkdir -p android/gradle/wrapper
        
        # Создаём правильный gradle-wrapper.properties с Gradle 8.6
        echo -e "distributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\ndistributionUrl=https\://services.gradle.org/distributions/gradle-8.6-bin.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists" > android/gradle/wrapper/gradle-wrapper.properties
        
        # Загружаем Gradle Wrapper JAR напрямую
        curl -s -o android/gradle/wrapper/gradle-wrapper.jar https://raw.githubusercontent.com/gradle/gradle/v8.6.0/gradle/wrapper/gradle-wrapper.jar
        
        echo "Установка актуальной версии Capacitor"
        npm install @capacitor/core@5.7.8 @capacitor/android@5.7.3
        
        # Добавляем Android платформу после установки совместимых версий
        echo "Добавляем Android платформу..."
        npx cap add android || { 
          echo "Ошибка при добавлении Android платформы, пытаемся глубоко очистить проект"; 
          rm -rf android node_modules;
          npm install;
          npm install @capacitor/core@5.7.8 @capacitor/android@5.7.3;
          npx cap add android; 
        }
        
        # Копируем google-services.json, если он существует
        if [ -f "google-services.json" ]; then
          echo "Копируем google-services.json в директорию Android проекта"
          
          # Убедимся, что директория android/app существует
          mkdir -p android/app
          
          cp google-services.json android/app/google-services.json
          echo "Файл скопирован в $(pwd)/android/app/google-services.json"
        fi
        
        # Синхронизируем проект с Android
        echo "Синхронизация Android проекта..."
        npx cap sync android
        
        # Проверяем версию Gradle в Wrapper
        echo "Текущая версия Gradle Wrapper:"
        cat android/gradle/wrapper/gradle-wrapper.properties
        
        cd ..
        
        # Настраиваем канал уведомлений
        node setup-android-notification-channel.js

    # 6. Android SDK и кеширование Gradle
    - uses: android-actions/setup-android@v3
    - uses: gradle/gradle-build-action@v3
      with:
        gradle-home-cache-cleanup: true
        gradle-version: 8.6

    # 7. Принудительно настраиваем Gradle 8.6 до запуска сборки
    - name: Setup correct Gradle Wrapper
      run: |
        cd capacitor-app/android
        
        # Убедимся, что разрешения выставлены
        chmod +x ./gradlew
        
        # Удаляем существующий wrapper
        rm -rf gradle/wrapper
        
        # Создаем директорию для wrapper
        mkdir -p gradle/wrapper
        
        # Создаем gradle-wrapper.properties с правильной версией
        echo "distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.6-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists" > gradle/wrapper/gradle-wrapper.properties
        
        # Проверяем, что файл обновлен
        cat gradle/wrapper/gradle-wrapper.properties
        
        # Загружаем Gradle Wrapper напрямую
        curl -s -o gradle/wrapper/gradle-wrapper.jar https://raw.githubusercontent.com/gradle/gradle/v8.6.0/gradle/wrapper/gradle-wrapper.jar
        
        # Проверяем версию Gradle (без использования gradlew, который может использовать неправильную версию)
        echo "Установлена версия Gradle 8.6"

    # 8. Сборка APK
    - name: Build unsigned APK
      run: |
        cd capacitor-app/android
        
        # Запускаем сборку с использованием обновленного Gradle
        ./gradlew assembleRelease --info

    # 9. Подписываем APK
    - name: Decode keystore
      run: echo "$KEYSTORE_B64" | base64 -d > keystore.jks
      env:
        KEYSTORE_B64: ${{ secrets.KEYSTORE_B64 }}

    - name: Sign APK
      run: |
        # Находим APK
        UNSIGNED=$(find capacitor-app/android/app/build/outputs/apk/release -name '*release-unsigned.apk' | head -n 1)
        echo "Unsigned APK: $UNSIGNED"
        
        if [ -z "$UNSIGNED" ]; then
          echo "APK file not found! Checking build directory..."
          find capacitor-app/android/app/build -type f -name "*.apk" || echo "No APK files found!"
          exit 1
        fi
        
        cp "$UNSIGNED" app-unsigned.apk
        
        # Подписываем APK
        APKSIGNER="$ANDROID_HOME/build-tools/34.0.0/apksigner"
        $APKSIGNER sign \
          --ks keystore.jks \
          --ks-key-alias "$ALIAS" \
          --ks-pass pass:"$KS_PASS" \
          --key-pass pass:"$KEY_PASS" \
          --out Loans-${{ github.ref_name }}.apk \
          app-unsigned.apk
          
        # Проверяем
        $APKSIGNER verify --verbose Loans-${{ github.ref_name }}.apk
      env:
        KS_PASS:  ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_PASS: ${{ secrets.KEY_PASSWORD }}
        ALIAS:    ${{ secrets.KEY_ALIAS }}

    # 10. Публикуем артефакт
    - uses: actions/upload-artifact@v4
      with:
        name: apk
        path: Loans-*.apk