name: Build APK

on:
  push:
    tags: ['v*']

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. Клонируем репозиторий
    - uses: actions/checkout@v4

    # 2. Устанавливаем Node.js
    - uses: actions/setup-node@v4
      with:
        node-version: '20'

    # 3. Устанавливаем Java 21 (для совместимости с Capacitor 7.2.0)
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        
    # 3.1 Очищаем кэш Gradle, чтобы предотвратить использование старой версии
    - name: Clear Gradle cache
      run: |
        rm -rf /home/runner/.gradle || true
        rm -rf ~/.gradle/wrapper/dists || true
        echo "Кэш Gradle полностью очищен"

    # 4. Установка зависимостей
    - run: npm ci

    # 5. Настройка переменных окружения для OneSignal
    - name: Setup OneSignal Environment
      run: |
        echo "VITE_ONESIGNAL_APP_ID=${{ secrets.ONESIGNAL_APP_ID }}" >> $GITHUB_ENV
        echo "VITE_ONESIGNAL_REST_API_KEY=${{ secrets.ONESIGNAL_REST_API_KEY }}" >> $GITHUB_ENV
        echo "Переменные окружения для OneSignal установлены"

    # 6. Подготовка проекта Capacitor
    - name: Prepare Capacitor project
      run: |
        # Подготовка проекта - создает папку capacitor-app с нужными файлами
        node prepare-for-apk.js
        
        cd capacitor-app
        
        # Очищаем и устанавливаем зависимости для Capacitor
        echo "Установка зависимостей Capacitor..."
        npm install
        
        # Очищаем проект перед добавлением платформы
        echo "Удаляем существующую Android платформу, если она есть"
        rm -rf android
        
        # Очищаем package.json от существующих Capacitor зависимостей
        echo "Очищаем package.json от Capacitor зависимостей"
        jq 'del(.dependencies."@capacitor/android") | del(.dependencies."@capacitor/core")' package.json > package.json.tmp
        mv package.json.tmp package.json
        
        # Устанавливаем базовые зависимости
        npm install
        
        # Создаём директорию и файлы для Gradle Wrapper
        mkdir -p android/gradle/wrapper
        
        # Создаём gradle-wrapper.properties с Gradle 8.0.2
        echo "distributionBase=GRADLE_USER_HOME" > android/gradle/wrapper/gradle-wrapper.properties
        echo "distributionPath=wrapper/dists" >> android/gradle/wrapper/gradle-wrapper.properties
        echo "distributionUrl=https\://services.gradle.org/distributions/gradle-8.0.2-bin.zip" >> android/gradle/wrapper/gradle-wrapper.properties
        echo "zipStoreBase=GRADLE_USER_HOME" >> android/gradle/wrapper/gradle-wrapper.properties
        echo "zipStorePath=wrapper/dists" >> android/gradle/wrapper/gradle-wrapper.properties
        
        # Загружаем Gradle Wrapper JAR напрямую
        curl -s -o android/gradle/wrapper/gradle-wrapper.jar https://raw.githubusercontent.com/gradle/gradle/v8.0.2/gradle/wrapper/gradle-wrapper.jar
        
        # Устанавливаем новые версии Capacitor
        echo "Установка актуальной версии Capacitor"
        npm install @capacitor/core@7.2.0 @capacitor/android@7.2.0

    # 7. Добавление Android платформы
    - name: Add Android platform
      run: |
        cd capacitor-app
        
        # Добавляем Android платформу
        echo "Добавляем Android платформу..."
        npx cap add android || { 
          echo "Ошибка при добавлении Android платформы, пытаемся глубоко очистить проект"; 
          rm -rf android node_modules;
          npm install;
          npm install @capacitor/core@7.2.0 @capacitor/android@7.2.0 onesignal-cordova-plugin@5.2.13;
          npx cap add android; 
        }
        
        # Копируем google-services.json в нужные места
        if [ -f "../google-services.json" ]; then
          echo "Копируем google-services.json из корня проекта в директории Android"
          
          # Создаем директории, если их нет
          mkdir -p android/app
          
          # Копируем файл в директорию android/app для Firebase плагина
          cp ../google-services.json android/app/google-services.json
          
          # Копируем в корень android директории для резервного копирования
          cp ../google-services.json android/google-services.json
          
          echo "Файл скопирован в необходимые директории Android"
          echo "Проверяем наличие файла в android/app:"
          ls -la android/app/google-services.json || echo "ФАЙЛ НЕ НАЙДЕН В android/app!"
        elif [ -f "google-services.json" ]; then
          echo "Копируем google-services.json из capacitor-app в директории Android"
          
          # Создаем директории, если их нет
          mkdir -p android/app
          
          # Копируем файл в директорию android/app для Firebase плагина
          cp google-services.json android/app/google-services.json
          
          # Копируем в корень android директории для резервного копирования
          cp google-services.json android/google-services.json
          
          echo "Файл скопирован в необходимые директории Android"
          echo "Проверяем наличие файла в android/app:"
          ls -la android/app/google-services.json || echo "ФАЙЛ НЕ НАЙДЕН В android/app!"
        else
          echo "ВНИМАНИЕ: google-services.json не найден ни в корне проекта, ни в capacitor-app!"
          echo "Push-уведомления могут не работать без этого файла!"
        fi
        
        # Вручную копируем шаблон AndroidManifest с POST_NOTIFICATIONS
        if [ -f "../capacitor-app/android/app/src/main/AndroidManifest-template.xml" ]; then
          echo "Копируем AndroidManifest-template.xml с разрешением POST_NOTIFICATIONS..."
          cp ../capacitor-app/android/app/src/main/AndroidManifest-template.xml android/app/src/main/AndroidManifest.xml
          echo "✅ AndroidManifest обновлен с разрешением POST_NOTIFICATIONS"
        fi
        
        cd ..
        
        # Настраиваем канал уведомлений ПЕРЕД синхронизацией Android
        echo "Настраиваем канал уведомлений для Android..."
        node setup-android-notification-channel.js
        
        cd capacitor-app
        
        # Синхронизируем проект с Android ПОСЛЕ настройки канала уведомлений
        echo "Синхронизация Android проекта..."
        npx cap sync android
        
        # Копируем патч манифеста
        echo "Копируем патч манифеста с POST_NOTIFICATIONS..."
        mkdir -p android/app/src/main/res/xml
        cp ../capacitor-app/android-patches/AndroidManifest.xml android/app/src/main/res/xml/notification_manifest.xml
        
        # Добавляем разрешение POST_NOTIFICATIONS в AndroidManifest.xml после синхронизации
        echo "Запускаем скрипт добавления разрешения POST_NOTIFICATIONS..."
        chmod +x ./add-notification-permission.sh
        ./add-notification-permission.sh
        
        # Запускаем принудительное обновление всех манифестов
        echo "Запускаем принудительный патчинг всех манифестов..."
        chmod +x ./force-patch-manifest.sh
        ./force-patch-manifest.sh
        
        # Патчим build.gradle для включения скрипта добавления разрешений
        echo "Патчим build.gradle для добавления скрипта мерджа разрешений..."
        chmod +x ./patch-build-gradle.sh
        ./patch-build-gradle.sh
        
        # Создаем config.xml напрямую для сохранения разрешения POST_NOTIFICATIONS
        echo "Создаем config.xml для сохранения разрешения POST_NOTIFICATIONS..."
        mkdir -p android/app/src/main/res/xml
        cat > android/app/src/main/res/xml/config.xml << 'EOF'
<?xml version='1.0' encoding='utf-8'?>
<widget version="1.0.0" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0">
  <!-- Сохраняем разрешение POST_NOTIFICATIONS -->
  <feature name="Permissions">
    <param name="android-package" value="com.android.plugins.Permissions"/>
  </feature>
  <!-- Явно запрашиваем разрешение для Android 13+ -->
  <preference name="AndroidXEnabled" value="true" />
  <preference name="GradlePluginGoogleServicesEnabled" value="true" />
  
  <!-- Конфигурация для сохранения разрешений -->
  <config-file parent="/*" target="AndroidManifest.xml">
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" tools:targetApi="33" />
  </config-file>
</widget>
EOF
        echo "✅ config.xml успешно создан"
        
        # Создаем capacitor.settings.gradle для интеграции в процесс сборки
        echo "Создаем capacitor.settings.gradle для процесса сборки..."
        cat > android/capacitor.settings.gradle << 'EOF'
// Этот файл используется для дополнительных настроек Capacitor

// Добавляем обработку разрешений
ext {
    // Указываем, что разрешение POST_NOTIFICATIONS должно быть сохранено
    includePermissions = ['android.permission.POST_NOTIFICATIONS']
}

// Хук для модификации AndroidManifest.xml
afterEvaluate {
    android.applicationVariants.all { variant ->
        try {
            def mergeTask = variant.outputs.first().processManifestProvider.get()
            mergeTask.doLast {
                println "⚠️ Проверяем наличие разрешения POST_NOTIFICATIONS в финальном манифесте..."
                def manifestFile = mergeTask.manifestOutputFile
                if (manifestFile.exists()) {
                    def manifestText = manifestFile.text
                    if (!manifestText.contains("android.permission.POST_NOTIFICATIONS")) {
                        println "❌ Разрешение POST_NOTIFICATIONS отсутствует, добавляем его..."
                        def modifiedText = manifestText.replace(
                            '<manifest',
                            '<manifest xmlns:tools="http://schemas.android.com/tools"'
                        )
                        modifiedText = modifiedText.replace(
                            '<application',
                            '<uses-permission android:name="android.permission.POST_NOTIFICATIONS" tools:targetApi="33" />\n<application'
                        )
                        manifestFile.text = modifiedText
                        println "✅ Разрешение POST_NOTIFICATIONS успешно добавлено!"
                    } else {
                        println "✅ Разрешение POST_NOTIFICATIONS уже присутствует в манифесте."
                    }
                }
            }
        } catch (Exception e) {
            println "⚠️ Ошибка при настройке проверки манифеста: ${e.message}"
        }
    }
}
EOF
        echo "✅ capacitor.settings.gradle успешно создан"
        
        # Добавляем включение настроек в build.gradle
        if [ -f "android/app/build.gradle" ]; then
          echo "Добавляем подключение capacitor.settings.gradle в build.gradle..."
          sed -i '/apply plugin: "com.android.application"/a apply from: "../capacitor.settings.gradle"' android/app/build.gradle
          echo "✅ capacitor.settings.gradle успешно подключен в build.gradle"
        fi
        
        # Проверяем манифест на наличие разрешения после всех модификаций
        if [ -f "android/app/src/main/AndroidManifest.xml" ]; then
          echo "Проверяем манифест на наличие разрешения POST_NOTIFICATIONS..."
          grep -i "POST_NOTIFICATIONS" android/app/src/main/AndroidManifest.xml || {
            echo "⚠️ Разрешение POST_NOTIFICATIONS не найдено в манифесте! Добавляем принудительно...";
            sed -i '/<manifest/a\\t<uses-permission android:name="android.permission.POST_NOTIFICATIONS" tools:targetApi="33" />' android/app/src/main/AndroidManifest.xml;
          }
        fi
        
        # Проверяем версию Gradle в Wrapper
        echo "Текущая версия Gradle Wrapper:"
        cat android/gradle/wrapper/gradle-wrapper.properties

    # 8. Android SDK и Gradle setup
    - uses: android-actions/setup-android@v3
    - uses: gradle/gradle-build-action@v3
      with:
        gradle-home-cache-cleanup: true
        gradle-version: 8.11
        arguments: --no-daemon --stacktrace

    # 9. Настройка Gradle Wrapper
    - name: Setup correct Gradle Wrapper
      run: |
        cd capacitor-app/android
        
        # Убедимся, что разрешения выставлены
        chmod +x ./gradlew || echo "Файл gradlew не найден, будет создан автоматически в процессе сборки"
        
        # Удаляем существующий wrapper и создаем заново
        rm -rf gradle/wrapper
        mkdir -p gradle/wrapper
        
        # Создаем gradle-wrapper.properties с Gradle 8.11
        echo "distributionBase=GRADLE_USER_HOME" > gradle/wrapper/gradle-wrapper.properties
        echo "distributionPath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
        echo "distributionUrl=https\://services.gradle.org/distributions/gradle-8.11-all.zip" >> gradle/wrapper/gradle-wrapper.properties
        echo "zipStoreBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
        echo "zipStorePath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
        
        # Проверяем, что файл обновлен
        cat gradle/wrapper/gradle-wrapper.properties
        
        # Загружаем Gradle Wrapper напрямую - используем JAR из актуальной версии Gradle
        curl -s -o gradle/wrapper/gradle-wrapper.jar https://raw.githubusercontent.com/gradle/gradle/v8.11.0/gradle/wrapper/gradle-wrapper.jar
        
        # Выполняем команду обновления wrapper, если gradlew доступен
        if [ -f "./gradlew" ]; then
          chmod +x ./gradlew
          ./gradlew wrapper --gradle-version 8.11 --distribution-type all
        else
          echo "Файл gradlew не найден, wrapper будет создан автоматически"
        fi

    # 10. Сборка APK с дополнительной проверкой разрешений
    - name: Build unsigned APK
      run: |
        cd capacitor-app/android
        
        # Проверяем и выводим содержимое манифеста перед сборкой
        echo "Содержимое AndroidManifest.xml перед сборкой:"
        cat app/src/main/AndroidManifest.xml
        
        # Проверяем наличие разрешения POST_NOTIFICATIONS перед сборкой
        echo "Проверка наличия POST_NOTIFICATIONS в манифесте перед сборкой:"
        grep -i "POST_NOTIFICATIONS" app/src/main/AndroidManifest.xml || {
          echo "⚠️ Разрешение POST_NOTIFICATIONS не найдено в манифесте! Добавляем принудительно перед сборкой...";
          sed -i '/<manifest/a\\t<uses-permission android:name="android.permission.POST_NOTIFICATIONS" tools:targetApi="33" />' app/src/main/AndroidManifest.xml;
        }
        
        # Выполняем сборку
        ./gradlew assembleRelease --info
        
        # Проверяем наличие разрешения в собранном APK
        echo "Проверка наличия POST_NOTIFICATIONS в собранном APK:"
        find app/build/outputs/apk/release -name "*.apk" | xargs -I{} $ANDROID_HOME/build-tools/34.0.0/aapt dump permissions {} | grep -i POST_NOTIFICATIONS

    # 11. Подписываем APK
    - name: Decode keystore
      run: echo "${{ secrets.KEYSTORE_B64 }}" | base64 -d > keystore.jks
      
    # 11.1 Показываем SHA1 отпечаток сертификата (полезно для Firebase)
    - name: Display certificate fingerprint
      run: |
        echo "Отпечаток сертификата (SHA1) для Firebase:"
        keytool -list -v -keystore keystore.jks -alias "${{ secrets.KEY_ALIAS }}" -storepass "${{ secrets.KEYSTORE_PASSWORD }}" | grep SHA1

    - name: Sign APK
      run: |
        # Находим APK
        UNSIGNED=$(find capacitor-app/android/app/build/outputs/apk/release -name '*release-unsigned.apk' | head -n 1)
        echo "Unsigned APK: $UNSIGNED"
        
        if [ -z "$UNSIGNED" ]; then
          echo "APK file not found! Checking build directory..."
          find capacitor-app/android/app/build -type f -name "*.apk" || echo "No APK files found!"
          exit 1
        fi
        
        cp "$UNSIGNED" app-unsigned.apk
        
        # Подписываем APK
        APKSIGNER="$ANDROID_HOME/build-tools/34.0.0/apksigner"
        $APKSIGNER sign \
          --ks keystore.jks \
          --ks-key-alias "${{ secrets.KEY_ALIAS }}" \
          --ks-pass pass:"${{ secrets.KEYSTORE_PASSWORD }}" \
          --key-pass pass:"${{ secrets.KEY_PASSWORD }}" \
          --out Loans-${{ github.ref_name }}.apk \
          app-unsigned.apk
          
        # Проверяем
        $APKSIGNER verify --verbose Loans-${{ github.ref_name }}.apk

    # 12. Публикуем артефакт
    - uses: actions/upload-artifact@v4
      with:
        name: apk
        path: Loans-*.apk
        
    # 13. Создаем релиз GitHub Release с APK
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: Loans-*.apk
        draft: false
        prerelease: false
        name: "Займы онлайн ${{ github.ref_name }}"
        body: |
          ### Займы онлайн (версия ${{ github.ref_name }})
          
          **Функциональность:**
          - Браузер займов с фильтрами
          - Админ-панель для управления займами
          - Push-уведомления через OneSignal
          
          **Технические детали:**
          - Используется Capacitor для компиляции в APK
          - Интеграция с Firebase для push-уведомлений
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}