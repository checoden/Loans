name: Build APK

on:
  push:
    tags: ['v*']

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Setup
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '20'
    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
    - uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: 8.5
        build-cache-enabled: true
        
    # Install dependencies
    - run: npm ci
    
    # Setup environment
    - name: Setup Environment
      run: |
        echo "VITE_ONESIGNAL_APP_ID=${{ secrets.ONESIGNAL_APP_ID }}" >> $GITHUB_ENV
        echo "VITE_ONESIGNAL_REST_API_KEY=${{ secrets.ONESIGNAL_REST_API_KEY }}" >> $GITHUB_ENV
    
    # Prepare project
    - name: Prepare Project
      run: |
        node prepare-for-apk.js
        cd capacitor-app && npm install
        npm install @capacitor/core@7.2.0 @capacitor/android@7.2.0 --legacy-peer-deps
    
    # Add platform
    - name: Add Android Platform
      run: |
        mkdir -p capacitor-app/android/app
        echo "${{ secrets.KEYSTORE_B64 }}" | base64 -d > capacitor-app/android/app/android-keystore.keystore
        cd capacitor-app
        npx cap add android
        
        # Handle Google Services
        if [ -f "../google-services.json" ]; then
          cp ../google-services.json android/app/google-services.json
        fi
        
        # Setup Android
        npx cap sync android
        node update-gradle-signing.js
    
    # Build APK
    - name: Build APK
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        cd capacitor-app/android
        ./gradlew :app:assembleRelease --stacktrace
    
    # Package APK
    - name: Package APK
      run: |
        cd capacitor-app/android
        APK_FILES=$(find app/build/outputs/apk/release -name "*.apk" | grep -v unsigned || true)
        FIRST_APK=$(echo "$APK_FILES" | head -n 1)
        cp "$FIRST_APK" "../../Loans-${{ github.ref_name }}.apk"
    
    # Upload artifacts
    - uses: actions/upload-artifact@v4
      with:
        name: apk
        path: Loans-*.apk
        
    # Create Release
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: Loans-*.apk
        name: "Займы онлайн ${{ github.ref_name }}"
        body: "Сборка версии ${{ github.ref_name }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}