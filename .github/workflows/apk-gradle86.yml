name: Build-APK-Gradle86

on:
  push:
    tags: ['v*']

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. Клонируем репозиторий
    - uses: actions/checkout@v4

    # 2. Устанавливаем Node.js
    - uses: actions/setup-node@v4
      with:
        node-version: '20'

    # 3. Устанавливаем Java 21
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    # 4. Выводим информацию о версиях
    - name: Debug environment
      run: |
        echo "Node version: $(node --version)"
        echo "Java version: $(java -version 2>&1 | head -n 1)"

    # 5. Установка NPM зависимостей
    - run: npm ci

    # 6. Подготовка проекта
    - name: Prepare Capacitor Project
      run: |
        # Подготовка проекта
        node prepare-for-apk.js
        
        cd capacitor-app
        npm install
        npx cap add android
        
        # Очень важно: обновим gradle-wrapper.properties до 8.6 перед синхронизацией
        cat > android/gradle/wrapper/gradle-wrapper.properties << EOF
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.6-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
EOF
        
        # Проверим установленный wrapper
        echo "Gradle Wrapper version:"
        cat android/gradle/wrapper/gradle-wrapper.properties
        
        # Синхронизируем проект
        npx cap sync android
        
        # Копируем google-services.json
        cp google-services.json android/app/google-services.json
        
        cd ..
        
        # Настраиваем канал уведомлений
        node setup-android-notification-channel.js

    # 7. Android SDK
    - uses: android-actions/setup-android@v3
    
    # 8. Кеширование Gradle
    - uses: gradle/gradle-build-action@v3
      with:
        gradle-home-cache-cleanup: true
        gradle-version: 8.6

    # 9. Дополнительные проверки
    - name: Verify Gradle Version
      run: |
        cd capacitor-app/android
        
        # Проверим версию Gradle Wrapper
        echo "Current Gradle wrapper configuration:"
        cat gradle/wrapper/gradle-wrapper.properties
        
        # Обновим его еще раз, если необходимо
        echo "distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.6-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists" > gradle/wrapper/gradle-wrapper.properties
        
        # Проверим наличие google-services.json
        if [ ! -f app/google-services.json ]; then
          echo "google-services.json missing, copying again..."
          cp ../google-services.json app/google-services.json
        fi
        
        # Настройка прав для gradlew
        chmod +x ./gradlew
        
        # Для совместимости с Java 21
        sed -i 's/DEFAULT_JVM_OPTS=""/DEFAULT_JVM_OPTS="--add-opens java.base\/java.lang=ALL-UNNAMED --add-opens java.base\/java.io=ALL-UNNAMED --add-opens java.base\/java.util=ALL-UNNAMED"/g' gradlew
        
        # Проверим, какую версию градл будет использовать
        ./gradlew -v

    # 10. Сборка APK
    - name: Build APK
      run: |
        cd capacitor-app/android
        
        # Запускаем сборку с дополнительными параметрами для отладки
        ./gradlew assembleRelease --info --stacktrace

    # 11. Подписываем APK
    - name: Decode keystore
      run: echo "$KEYSTORE_B64" | base64 -d > keystore.jks
      env:
        KEYSTORE_B64: ${{ secrets.KEYSTORE_B64 }}

    - name: Sign APK
      run: |
        # Поиск APK файла
        UNSIGNED=$(find capacitor-app/android/app/build/outputs/apk/release -name '*release-unsigned.apk' | head -n 1)
        echo "Unsigned APK: $UNSIGNED"
        
        if [ -z "$UNSIGNED" ]; then
          echo "APK file not found! Checking for any APK files..."
          find capacitor-app/android/app/build -type f -name "*.apk" || echo "No APK files found!"
          exit 1
        fi
        
        # Копируем во временный файл
        cp "$UNSIGNED" app-unsigned.apk
        
        # Подписываем APK
        APKSIGNER="$ANDROID_HOME/build-tools/34.0.0/apksigner"
        $APKSIGNER sign \
          --ks keystore.jks \
          --ks-key-alias "$ALIAS" \
          --ks-pass pass:"$KS_PASS" \
          --key-pass pass:"$KEY_PASS" \
          --out Loans-${{ github.ref_name }}.apk \
          app-unsigned.apk
          
        # Проверяем
        $APKSIGNER verify --verbose Loans-${{ github.ref_name }}.apk
      env:
        KS_PASS:  ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_PASS: ${{ secrets.KEY_PASSWORD }}
        ALIAS:    ${{ secrets.KEY_ALIAS }}

    # 12. Публикуем артефакт
    - uses: actions/upload-artifact@v4
      with:
        name: apk
        path: Loans-*.apk