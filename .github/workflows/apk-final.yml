name: Build-APK-Final

on:
  push:
    tags: ['v*']

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. Клонируем репозиторий
    - uses: actions/checkout@v4

    # 2. Устанавливаем Node.js
    - uses: actions/setup-node@v4
      with:
        node-version: '20'

    # 3. Устанавливаем Java 21
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    # 4. Выводим информацию о версиях для отладки
    - name: Debug environment
      run: |
        echo "Node version:"
        node --version
        echo "Java version:"
        java -version
        echo "Project contents:"
        ls -la

    # 5. Установка NPM зависимостей
    - run: npm ci

    # 6. Создаем файл google-services.json, если его нет
    - name: Setup Firebase Config
      run: |
        # Проверяем наличие файла
        if [ -f "capacitor-app/google-services.json" ]; then
          echo "Found existing google-services.json"
          ls -la capacitor-app/google-services.json
        else
          echo "Creating google-services.json from secrets"
          # Создаем директорию, если ее нет
          mkdir -p capacitor-app
          
          # Создаем файл google-services.json из секрета GitHub или используем шаблон
          if [ -n "$FIREBASE_CONFIG" ]; then
            echo "$FIREBASE_CONFIG" > capacitor-app/google-services.json
          else
            # Создаем минимальный шаблон, если секрет не предоставлен
            echo '{
              "project_info": {
                "project_number": "241645357896",
                "project_id": "onlineloans-5c9d1",
                "storage_bucket": "onlineloans-5c9d1.firebasestorage.app"
              },
              "client": [
                {
                  "client_info": {
                    "mobilesdk_app_id": "1:241645357896:android:b2772bac96136bbf63017d",
                    "android_client_info": {
                      "package_name": "ru.checoden.onlineloans"
                    }
                  },
                  "oauth_client": [],
                  "api_key": [
                    {
                      "current_key": "AIzaSyAVdjOpxSao5NpnRBum7Q4qC519E87aeoU"
                    }
                  ],
                  "services": {
                    "appinvite_service": {
                      "other_platform_oauth_client": []
                    }
                  }
                }
              ],
              "configuration_version": "1"
            }' > capacitor-app/google-services.json
          fi
          
          echo "Created google-services.json:"
          ls -la capacitor-app/google-services.json
        fi
      env:
        FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}

    # 7. Подготовка проекта Capacitor
    - name: Prepare Capacitor project
      run: |
        # Подготовка проекта
        node prepare-for-apk.js
        
        # Переходим в директорию Capacitor
        cd capacitor-app
        
        # Устанавливаем зависимости
        npm install
        
        # Добавляем Android платформу
        npx cap add android
        
        # Создаем все нужные директории
        mkdir -p android/app/src/main
        
        # Копируем google-services.json в правильное место
        echo "Copying google-services.json to Android project"
        cp google-services.json android/app/google-services.json
        
        # Проверяем, что файл скопирован
        ls -la android/app/google-services.json || echo "Failed to copy google-services.json"
        
        # Обновляем gradle-wrapper.properties для использования Gradle 8.6
        mkdir -p android/gradle/wrapper
        echo "distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\\://services.gradle.org/distributions/gradle-8.6-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists" > android/gradle/wrapper/gradle-wrapper.properties
        
        # Настройка Java 21 в build.gradle
        if [ -f "android/build.gradle" ]; then
          echo "// Add Java 21 compatibility settings to bottom of build.gradle
allprojects {
    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }
}" >> android/build.gradle
        fi
        
        # Настройка Java 21 в app/build.gradle
        if [ -f "android/app/build.gradle" ]; then
          echo "// Add Java 21 compatibility settings to app/build.gradle
android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }
}" >> android/app/build.gradle
        fi
        
        # Синхронизируем проект
        npx cap sync android
        
        # Возвращаемся в корневую директорию
        cd ..
        
        # Настраиваем канал уведомлений
        node setup-android-notification-channel.js

    # 8. Android SDK
    - uses: android-actions/setup-android@v3
    
    # 9. Настройка Gradle для ускорения сборки
    - uses: gradle/gradle-build-action@v3
      with:
        gradle-home-cache-cleanup: true

    # 10. Сборка APK
    - name: Build unsigned APK
      run: |
        # Проверяем наличие google-services.json перед сборкой
        echo "Checking google-services.json before build"
        ls -la capacitor-app/android/app/google-services.json || echo "google-services.json not found before build"
        
        cd capacitor-app/android
        chmod +x ./gradlew
        
        # Для совместимости с Java 21 обновим gradle-wrapper скрипт
        sed -i 's/DEFAULT_JVM_OPTS=""/DEFAULT_JVM_OPTS="--add-opens java.base\/java.lang=ALL-UNNAMED --add-opens java.base\/java.io=ALL-UNNAMED --add-opens java.base\/java.util=ALL-UNNAMED"/g' gradlew
        
        # Соберем проект с более подробным выводом
        ./gradlew --stacktrace --info assembleRelease

    # 11. Восстанавливаем keystore из секрета
    - name: Decode keystore
      run: echo "$KEYSTORE_B64" | base64 -d > keystore.jks
      env:
        KEYSTORE_B64: ${{ secrets.KEYSTORE_B64 }}

    # 12. Подписываем APK
    - name: Sign APK
      run: |
        # Находим APK
        UNSIGNED=$(find capacitor-app/android/app/build/outputs/apk/release -name '*release-unsigned.apk' | head -n 1)
        echo "Unsigned APK found at: $UNSIGNED"

        # Копируем во временный файл
        cp "$UNSIGNED" app-unsigned.apk

        # Подписываем
        APKSIGNER="$ANDROID_HOME/build-tools/34.0.0/apksigner"
        $APKSIGNER sign \
          --ks keystore.jks \
          --ks-key-alias "$ALIAS" \
          --ks-pass pass:"$KS_PASS" \
          --key-pass pass:"$KEY_PASS" \
          --out Loans-${{ github.ref_name }}.apk \
          app-unsigned.apk

        # Проверяем
        $APKSIGNER verify --verbose Loans-${{ github.ref_name }}.apk
      env:
        KS_PASS:  ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_PASS: ${{ secrets.KEY_PASSWORD }}
        ALIAS:    ${{ secrets.KEY_ALIAS }}

    # 13. Публикуем артефакт
    - uses: actions/upload-artifact@v4
      with:
        name: apk
        path: Loans-*.apk