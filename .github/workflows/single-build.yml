name: Build APK

on:
  push:
    tags: ['v*']

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. Клонируем репозиторий
    - uses: actions/checkout@v4

    # 2. Устанавливаем Node.js
    - uses: actions/setup-node@v4
      with:
        node-version: '20'

    # 3. Устанавливаем Java 21 (для совместимости с Capacitor 7.2.0)
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    # 4. Установка зависимостей
    - run: npm ci

    # 5. Настройка переменных окружения для OneSignal
    - name: Setup OneSignal Environment
      run: |
        echo "VITE_ONESIGNAL_APP_ID=${{ secrets.ONESIGNAL_APP_ID }}" >> $GITHUB_ENV
        echo "VITE_ONESIGNAL_REST_API_KEY=${{ secrets.ONESIGNAL_REST_API_KEY }}" >> $GITHUB_ENV
        echo "Переменные окружения для OneSignal установлены"

    # 6. Подготовка проекта Capacitor
    - name: Prepare Capacitor project
      run: |
        # Подготовка проекта - создает папку capacitor-app с нужными файлами
        node prepare-for-apk.js
        
        cd capacitor-app
        
        # Устанавливаем зависимости
        npm install
        
        # Удаляем существующую Android платформу, если она есть
        rm -rf android
        
        # Устанавливаем актуальные версии Capacitor и OneSignal
        npm install @capacitor/core@7.2.0 @capacitor/android@7.2.0 onesignal-cordova-plugin@5.2.13
        
        # Добавляем Android платформу
        echo "Добавляем Android платформу..."
        npx cap add android
        
        # Создаем AndroidManifest.xml с необходимыми разрешениями
        mkdir -p android/app/src/main
        echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>" > android/app/src/main/AndroidManifest.xml
        echo "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"" >> android/app/src/main/AndroidManifest.xml
        echo "    xmlns:tools=\"http://schemas.android.com/tools\"" >> android/app/src/main/AndroidManifest.xml
        echo "    package=\"ru.checoden.onlineloans\">" >> android/app/src/main/AndroidManifest.xml
        echo "" >> android/app/src/main/AndroidManifest.xml
        echo "    <!-- Базовые разрешения -->" >> android/app/src/main/AndroidManifest.xml
        echo "    <uses-permission android:name=\"android.permission.INTERNET\" />" >> android/app/src/main/AndroidManifest.xml
        echo "    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />" >> android/app/src/main/AndroidManifest.xml
        echo "" >> android/app/src/main/AndroidManifest.xml
        echo "    <!-- Разрешение для показа уведомлений на Android 13+ (API 33+) -->" >> android/app/src/main/AndroidManifest.xml
        echo "    <uses-permission android:name=\"android.permission.POST_NOTIFICATIONS\" tools:targetApi=\"33\" />" >> android/app/src/main/AndroidManifest.xml
        echo "" >> android/app/src/main/AndroidManifest.xml
        echo "    <!-- Разрешения для Firebase и OneSignal -->" >> android/app/src/main/AndroidManifest.xml
        echo "    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />" >> android/app/src/main/AndroidManifest.xml
        echo "    <uses-permission android:name=\"android.permission.VIBRATE\" />" >> android/app/src/main/AndroidManifest.xml
        echo "    <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\" />" >> android/app/src/main/AndroidManifest.xml
        echo "" >> android/app/src/main/AndroidManifest.xml
        echo "    <application></application>" >> android/app/src/main/AndroidManifest.xml
        echo "</manifest>" >> android/app/src/main/AndroidManifest.xml
        
        echo "✅ AndroidManifest.xml успешно создан с разрешением POST_NOTIFICATIONS"
        
        # Копируем google-services.json
        if [ -f "../google-services.json" ]; then
          echo "Копируем google-services.json из корня проекта"
          cp ../google-services.json android/app/google-services.json
        fi
        
        # Настройка канала уведомлений
        node ../setup-android-notification-channel.js
        
        # Синхронизируем проект
        echo "Синхронизация проекта Android..."
        npx cap sync android

    # 7. Android SDK и Gradle setup
    - uses: android-actions/setup-android@v3
    - uses: gradle/gradle-build-action@v3
      with:
        gradle-version: 8.11

    # 8. Сборка APK
    - name: Build unsigned APK
      run: |
        cd capacitor-app/android
        
        # Проверяем содержимое манифеста перед сборкой
        echo "Содержимое AndroidManifest.xml:"
        cat app/src/main/AndroidManifest.xml
        
        # Собираем релизную версию APK
        ./gradlew assembleRelease --stacktrace

    # 9. Подписываем APK
    - name: Decode keystore
      run: echo "${{ secrets.KEYSTORE_B64 }}" | base64 -d > keystore.jks
      
    # Показываем SHA1 отпечаток сертификата (полезно для Firebase)
    - name: Display certificate fingerprint
      run: |
        echo "Отпечаток сертификата (SHA1) для Firebase:"
        keytool -list -v -keystore keystore.jks -alias "${{ secrets.KEY_ALIAS }}" -storepass "${{ secrets.KEYSTORE_PASSWORD }}" | grep SHA1

    - name: Sign APK
      run: |
        # Находим APK
        UNSIGNED=$(find capacitor-app/android/app/build/outputs/apk/release -name '*release-unsigned.apk' | head -n 1)
        echo "Unsigned APK: $UNSIGNED"
        
        if [ -z "$UNSIGNED" ]; then
          echo "APK file not found! Checking build directory..."
          find capacitor-app/android/app/build -type f -name "*.apk" || echo "No APK files found!"
          exit 1
        fi
        
        cp "$UNSIGNED" app-unsigned.apk
        
        # Подписываем APK
        APKSIGNER="$ANDROID_HOME/build-tools/34.0.0/apksigner"
        $APKSIGNER sign \
          --ks keystore.jks \
          --ks-key-alias "${{ secrets.KEY_ALIAS }}" \
          --ks-pass pass:"${{ secrets.KEYSTORE_PASSWORD }}" \
          --key-pass pass:"${{ secrets.KEY_PASSWORD }}" \
          --out Loans-${{ github.ref_name }}.apk \
          app-unsigned.apk
          
        # Проверяем подпись
        $APKSIGNER verify --verbose Loans-${{ github.ref_name }}.apk
        
        # Проверяем наличие разрешения POST_NOTIFICATIONS
        echo "Проверка наличия разрешения POST_NOTIFICATIONS в APK:"
        $ANDROID_HOME/build-tools/34.0.0/aapt dump permissions Loans-${{ github.ref_name }}.apk | grep POST_NOTIFICATIONS

    # 10. Публикуем артефакт
    - uses: actions/upload-artifact@v4
      with:
        name: apk
        path: Loans-*.apk
        
    # 11. Создаем релиз GitHub Release с APK
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: Loans-*.apk
        draft: false
        prerelease: false
        name: "Займы онлайн ${{ github.ref_name }}"
        body: |
          ### Займы онлайн (версия ${{ github.ref_name }})
          
          **Функциональность:**
          - Браузер займов с фильтрами
          - Админ-панель для управления займами
          - Push-уведомления через OneSignal (поддержка Android 13+)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}