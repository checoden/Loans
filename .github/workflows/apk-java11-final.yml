name: Build-APK-Java11

on:
  push:
    tags: ['v*']

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. Клонируем репозиторий
    - uses: actions/checkout@v4

    # 2. Устанавливаем Node.js
    - uses: actions/setup-node@v4
      with:
        node-version: '20'

    # 3. Устанавливаем Java 11 (гарантированно совместимую с Gradle 8.0.2)
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        distribution: 'adopt'
        java-version: '11'

    # 4. Проверяем версии
    - name: Debug environment
      run: |
        echo "Node version: $(node --version)"
        echo "Java version:"
        java -version
        echo "Checking for google-services.json:"
        ls -la capacitor-app/google-services.json || echo "File not found!"

    # 5. Устанавливаем зависимости
    - run: npm ci

    # 6. Подготовка проекта Capacitor
    - name: Prepare Capacitor project
      run: |
        # Подготовка проекта
        node prepare-for-apk.js
        
        # Переходим в директорию Capacitor
        cd capacitor-app
        
        # Проверяем файл google-services.json
        ls -la google-services.json || echo "google-services.json not found in capacitor-app"
        
        # Устанавливаем зависимости
        npm install
        
        # Добавляем Android платформу
        npx cap add android
        
        # Копируем google-services.json в Android проект
        mkdir -p android/app/src/main
        cp google-services.json android/app/google-services.json
        echo "google-services.json copied to android/app/"
        ls -la android/app/google-services.json || echo "Failed to copy google-services.json"
        
        # Синхронизируем проект
        npx cap sync android
        
        # Копируем google-services.json еще раз после синхронизации
        cp google-services.json android/app/google-services.json
        echo "google-services.json re-copied after sync:"
        ls -la android/app/google-services.json || echo "Failed to copy after sync"
        
        # Возвращаемся в корневую директорию
        cd ..
        
        # Настраиваем канал уведомлений
        node setup-android-notification-channel.js

    # 7. Android SDK и Gradle
    - uses: android-actions/setup-android@v3
    - uses: gradle/gradle-build-action@v3
      with:
        gradle-home-cache-cleanup: true

    # 8. Сборка APK
    - name: Build unsigned APK
      run: |
        # Проверим наличие файла еще раз
        echo "Checking google-services.json before build:"
        ls -la capacitor-app/android/app/google-services.json || echo "Still missing!"
        
        cd capacitor-app/android
        chmod +x ./gradlew
        
        # Собираем проект с подробными логами
        ./gradlew --stacktrace --info assembleRelease

    # 9. Подписываем APK
    - name: Decode keystore
      run: echo "$KEYSTORE_B64" | base64 -d > keystore.jks
      env:
        KEYSTORE_B64: ${{ secrets.KEYSTORE_B64 }}

    - name: Sign APK
      run: |
        # Поиск APK файла
        UNSIGNED=$(find capacitor-app/android/app/build/outputs/apk/release -name '*release-unsigned.apk' | head -n 1)
        echo "Unsigned APK: $UNSIGNED"
        
        if [ -z "$UNSIGNED" ]; then
          echo "APK file not found! Checking for any APK files..."
          find capacitor-app/android/app/build -type f -name "*.apk" || echo "No APK files found!"
          exit 1
        fi
        
        # Копируем во временный файл
        cp "$UNSIGNED" app-unsigned.apk
        
        # Подписываем APK
        APKSIGNER="$ANDROID_HOME/build-tools/33.0.2/apksigner"
        $APKSIGNER sign \
          --ks keystore.jks \
          --ks-key-alias "$ALIAS" \
          --ks-pass pass:"$KS_PASS" \
          --key-pass pass:"$KEY_PASS" \
          --out Loans-${{ github.ref_name }}.apk \
          app-unsigned.apk
          
        # Проверяем
        $APKSIGNER verify --verbose Loans-${{ github.ref_name }}.apk
      env:
        KS_PASS:  ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_PASS: ${{ secrets.KEY_PASSWORD }}
        ALIAS:    ${{ secrets.KEY_ALIAS }}

    # 10. Публикуем артефакт
    - uses: actions/upload-artifact@v4
      with:
        name: apk
        path: Loans-*.apk