name: Build-APK-New          # Новый обновленный workflow

on:
  push:
    tags: ['v*']         # триггер только при push тега v1.0.0, v1.1.3 …

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. Клонируем репозиторий
    - uses: actions/checkout@v4

    # 2. Node.js + зависимости фронта/бэка
    - uses: actions/setup-node@v4
      with:
        node-version: '20'

    # 3. JDK 17 (совместимый с Gradle 8.0.2)
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '17'

    - run: npm ci
    
    # Подготовка проекта для APK
    - name: Prepare for APK
      run: |
        # Проверяем версию Java
        echo "Using Java version:"
        java -version
        
        node prepare-for-apk.js
        cd capacitor-app
        
        # Используем npm install вместо npm ci, если нет package-lock.json
        if [ -f "package-lock.json" ]; then
          npm ci
        else
          npm install
        fi
        
        npx cap add android
        npx cap sync android
        cd ..
        node setup-android-notification-channel.js

    # 4. Android‑SDK + build‑tools
    - uses: android-actions/setup-android@v3

    # 5. Обновляем градл-враппер для поддержки Java 17
    - name: Update Gradle Wrapper
      run: |
        cd capacitor-app/android
        
        # Обновляем gradle-wrapper.properties для использования Gradle 8.3
        # Gradle 8.3 поддерживает Java 17 полностью
        mkdir -p gradle/wrapper
        cat > gradle/wrapper/gradle-wrapper.properties << EOF
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.3-bin.zip
networkTimeout=10000
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
EOF
        
        # Сообщаем об успешном обновлении
        echo "Updated Gradle wrapper to 8.3"
        cd ../..

    # 6. Release‑сборка (unsigned)
    - name: Build unsigned APK
      run: |
        # Копируем google-services.json в правильную директорию
        if [ -f "capacitor-app/google-services.json" ]; then
          echo "Copying google-services.json to Android project"
          cp capacitor-app/google-services.json capacitor-app/android/app/google-services.json
        else
          echo "WARNING: google-services.json not found in capacitor-app directory!"
        fi
        
        cd capacitor-app/android
        ./gradlew assembleRelease

    # 7. Восстанавливаем keystore из секрета
    - name: Decode keystore
      run: echo "$KEYSTORE_B64" | base64 -d > keystore.jks
      env:
        KEYSTORE_B64: ${{ secrets.KEYSTORE_B64 }}

    # 8. Подписываем и apksigner (динамический поиск APK)
    - name: Sign APK (apksigner)
      run: |
        # 1. Находим первый release‑unsigned.apk
        UNSIGNED=$(find capacitor-app/android/app/build/outputs/apk/release -name '*release-unsigned.apk' | head -n 1)
        echo "Unsigned: $UNSIGNED"

        # 2. Копируем во временный файл, т.к. apksigner пишeт поверх
        cp "$UNSIGNED" app-unsigned.apk

        # 3. Подписываем V1+V2
        APKSIGNER="$ANDROID_HOME/build-tools/34.0.0/apksigner"
        $APKSIGNER sign \
          --ks keystore.jks \
          --ks-key-alias "$ALIAS" \
          --ks-pass pass:"$KS_PASS" \
          --key-pass pass:"$KEY_PASS" \
          --out Loans-${{ github.ref_name }}.apk \
          app-unsigned.apk

        # 4. Проверяем сигнатуру
        $APKSIGNER verify --verbose Loans-${{ github.ref_name }}.apk
      env:
        KS_PASS:  ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_PASS: ${{ secrets.KEY_PASSWORD }}
        ALIAS:    ${{ secrets.KEY_ALIAS }}

    # 9. Публикуем артефакт
    - uses: actions/upload-artifact@v4
      with:
        name: apk
        path: Loans-*.apk